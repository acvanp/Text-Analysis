0.0015870148576677694,
0.005527186476981992,
0.9533858959447506,
0.0005543629547437417,
1.0795040792518351e-05,
0.00010390470203829038,
5.954127988642966e-05,
0.0,
7.810091944259571e-05,
0.028416068268975005,
0.0,
0.0009712679716963378,
1.174031771161785e-05,
0.08989747774436412,
0.7365467495818715,
1.6104853157737926e-06,
0.14160889956827427,
0.0025299558842827676,
1.393903217347403e-05,
0.0,
0.10041886839598523,
0.004679619824275148,
0.001923412722095179,
0.20971793422738116,
0.013946767027424686,
0.6468753682257543,
1.1269191318056673e-05,
0.0005855474558090976,
0.02179677467561769)
m2 = matrix(c(1.0,
0.0,
0.0,
0.0,
0.0,
0.0,
0.0,
0.0,
0.0,
0.0,
0.024603926490902595,
0.49786270233684554,
0.10206159105331121,
0.0,
0.0001368635429012053,
0.13503447452119938,
0.036875239636938735,
0.014018394419160581,
0.10422272891406095,
0.053037405061515476,
0.21340088946458768,
0.5785183566088339,
0.0,
0.0352842036659676,
0.0004902724226235562,
0.0002132670630994046,
0.021580950994194208,
0.08767916223306946,
0.03802018215104491,
0.02477686816977285,
0.0007878884839932387,
0.005014948279070719,
0.00027496199529727943,
0.06676292856448302,
0.00012583728300624556,
1.9364640991872556e-06,
0.9261907882712402,
0.0,
0.0005923425284867861,
0.00023120828947163183,
1.3031855266837516e-05,
0.03374897790163963,
0.0,
1.821605309917227e-06,
0.17311189456656784,
0.05062367752181829,
5.743967475534282e-05,
1.2940790325076533e-06,
0.21402234244425286,
0.5284171271556607,
0.0343139834049918,
0.0,
0.020913510857284774,
0.004470831002698488,
0.38279310647219866,
0.009817415630085268,
0.009778404671025696,
0.4429267987954589,
0.0023106243645637306,
0.028120496508920484,
0.0,
0.00022448651560879885,
0.008924732217943272,
0.0005697837786970861,
4.7676615443372936e-05,
0.002206778528861613,
0.6353074245614955,
0.35051851719917626,
0.002165065985474679,
6.550810968626578e-06,
0.03838206156366976,
0.0015870148576677694,
0.005527186476981992,
0.9533858959447506,
0.0005543629547437417,
1.0795040792518351e-05,
0.00010390470203829038,
5.954127988642966e-05,
0.0,
7.810091944259571e-05,
0.028416068268975005,
0.0,
0.0009712679716963378,
1.174031771161785e-05,
0.08989747774436412,
0.7365467495818715,
1.6104853157737926e-06,
0.14160889956827427,
0.0025299558842827676,
1.393903217347403e-05,
0.0,
0.10041886839598523,
0.004679619824275148,
0.001923412722095179,
0.20971793422738116,
0.013946767027424686,
0.6468753682257543,
1.1269191318056673e-05,
0.0005855474558090976,
0.02179677467561769), nrow = 10)
m2
s = c(34, 3, 80, 32, 83, 10, 54, 57, 8, 90)
ntrials = 100
ll = list(s)
for(i in 2:ntrials){
s = s %*% m2 # matrix multiplicatoin is %*%
ll[[i]] = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black", pch = 16, cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
s = c(34, 3, 80, 32, 83, 10, 54, 57, 8, 90)
ntrials = 100
ll = list(s)
for(i in 2:ntrials){
s = s %*% m2 # matrix multiplicatoin is %*%
ll[[i]] = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black", pch = 16, cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
s = c(34, 3, 80, 32, 83, 10, 54, 57, 8, 90)
ntrials = 100
ll = list(s)
for(i in 2:ntrials){
s = s %*% m2 # matrix multiplicatoin is %*%
ll[[i]] = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black", pch = 16, cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
m
m2
m2 = matrix(c(0.011690863643626839,
0.00208363457854372,
0.0010446597820199185,
1.0086039512323668e-05,
0.9836486021568143,
0.0005358182282307495,
0.0009342611545195308,
1.1981113805065211e-05,
3.405352686588259e-05,
0.0,
0.0,
0.04334674114563235,
0.05172599536091321,
0.59970597340892,
0.021726468614856272,
0.009533052061105763,
0.004141402703164848,
0.02655296676253436,
0.06025409630496467,
0.16189932107011878,
5.055920688859413e-09,
4.988313662683539e-07,
2.3588507063017306e-06,
8.15825394213872e-08,
0.11401589247168911,
1.2807780508630066e-07,
0.0,
0.8856621609834571,
0.0002903385089401079,
2.8517768861580334e-05,
0.007096128345019328,
6.913273381593513e-05,
1.3329374094568604e-06,
0.6712622692931222,
3.0532022833877325e-05,
0.0,
2.890337861345511e-06,
0.0006192250299397364,
0.3209164151603534,
1.8684723534245911e-06,
0.0007647546742885794,
0.7099880261430201,
0.00012450277628457465,
0.004077009304757333,
9.156056292731852e-06,
0.19605417705744518,
0.0,
0.00011578355322425227,
0.035586047207293664,
0.053267206798486746,
0.11877399410088617,
0.00019378469441691136,
0.009910545210425996,
0.14458814423460456,
0.0,
4.83655248726362e-05,
0.00035405672278657945,
0.5771886666498102,
0.0004778124300979888,
0.14834424556070758,
0.0,
0.0,
0.0,
0.0,
0.0,
0.0,
1.0,
0.0,
0.0,
0.0,
0.004957705870130212,
0.03224075711510249,
0.19426396589603237,
0.00941016648638057,
0.29064210731558904,
0.12315189511953589,
0.011278084037818097,
0.0,
0.3333786930135377,
0.0004476561767006577,
0.00031182829423999435,
0.01293281976847571,
0.008543691371700314,
0.0001608586217197066,
0.0020110142865844356,
0.6845323415637423,
0.011507323937302649,
0.2798194467274099,
7.722905567557456e-05,
0.0,
0.002609600904366044,
0.0013690304854051918,
0.10833041782199034,
0.7698119615348435,
0.0022162580037233914,
0.0,
0.0024009457534220472,
0.05749624259822144,
0.03870247166791761,
0.016885056381361067), nrow = 10)
m
s = c(34, 3, 80, 32, 83, 10, 54, 57, 8, 90)
ntrials = 100
ll = list(s)
for(i in 2:ntrials){
s = s %*% m2 # matrix multiplicatoin is %*%
ll[[i]] = s
}
#plot s as a dataframe version of the simplified ll
df = as.data.frame(t(simplify2array(ll)))
df = cbind(c(1:ntrials), df)
cols = colorRampPalette(c("red", "yellow", "blue"))(len.vector-1)
x = which(m %in% 1)%%len.vector #find the column number in matrix m that is the absorbing state
x[which(x == 0)] = len.vector #if it is the last column, then this  modulo method  needs to be chanced to len.vector instead of 0
k = 1
for(i in 1:len.vector){
if(k<=length(x)){if(i == x[k]){
plot(df$`c(1:ntrials)`, df[,i+1], # plot absorbing state with black dashes
col = "black", pch = 16, cex = 0.8, ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE); k = k+1; next}}
if(i < len.vector){ # plot the other states with colorful symbols
plot(df$`c(1:ntrials)`, df[,i+1],
col = cols[i], ylim = c(0, max(ss)), ylab = "", xlab = "")
par(new = TRUE)
}else( # last state doesn't have the par(new = TRUE) statement
plot(df$`c(1:ntrials)`, df$V1, col = cols[i],
ylim = c(0, max(ss)), ylab = "", xlab = "")
)
}
m
docs <- Corpus(VectorSource(c(nietzsche, dbz))) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(tolower)  %>%
tm_map(removeWords, c( "-", "chapter",
"xvi", "cleanthes","philo",
"footnote", "things", "prop", commonwords, stopwords("english"))) %>%
tm_map(stripWhitespace)
docs <- Corpus(VectorSource(c(nietzsche, nietzsche))) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(tolower)  %>%
tm_map(removeWords, c( "-", "chapter",
"xvi", "cleanthes","philo",
"footnote", "things", "prop", commonwords, stopwords("english"))) %>%
tm_map(stripWhitespace)
docs = Corpus(VectorSource(dbz))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("nietzsche", "blabla1", "blabla2", "-", "chapter"))
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
v <- sort(rowSums(m),decreasing=TRUE)
m <- as.matrix(dtm)
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
head(d, 10)
d <- data.frame(word = names(v),freq=v)
d = d[which(!d$word %in%
c(commonwords$V1[1:200], "-")) , ]
commonwords = read.csv(fileName, header = FALSE)
d = d[which(nchar(d$word) > 1),]
res<- wordcloud(words = d$word, freq = d$freq, lang = "english",
max.words = 120, colorPalette = "black")
library(readr)
fileName = "C:/Users/Lenovo/Demo/mostcommonwords1000.txt"
d = d[which(!d$word %in%
c(commonwords$V1[1:200], "-")) , ]
d <- data.frame(word = names(v),freq=v)
v <- sort(rowSums(m),decreasing=TRUE)
v
res<- wordcloud(dtm, lang = "english",
max.words = 120, colorPalette = "black")
res<- wordcloud(dtm, random.order=FALSE, lang = "english",
max.words = 120, colorPalette = "black")
res<- wordcloud(m, lang = "english",
max.words = 120, colorPalette = "black")
names(v)
freq(v)
v[[1]]
v[1]
v
data.frame(word = names(v),freq=v)
d <- data.frame(word = names(v),freq=v)
res<- wordcloud(words = d$word, freq = d$freq, lang = "english",
max.words = 120, colorPalette = "black")
# May 16 2020
# Wordcloud in R
# Alex Van Plantinga
# Visualization of word usage in Thus Spake Zarathustra by Nietzsche
# obtain text from gutenbergr
library(gutenbergr)
gutenberg_metadata[which(startsWith(gutenberg_metadata$author, "Nietzsche") ),]
#1998 Thus Spake Zarathustra
nietzsche = gutenberg_download(1998)
library(wordcloud)
library(tm)
library(SnowballC)
library(readr)
library(dplyr)
docs = Corpus(VectorSource(nietzsche))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("nietzsche", "blabla1", "blabla2", "-", "chapter"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
#docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
fileName = "C:/Users/Lenovo/Demo/mostcommonwords1000.txt"
commonwords = read.csv(fileName, header = FALSE)
d = d[which(!d$word %in%
c(commonwords$V1[1:200], "-")) , ]
d = d[which(nchar(d$word) > 1),]
res<- wordcloud(words = d$word, freq = d$freq, lang = "english",
max.words = 120, colorPalette = "black")
docs = Corpus(VectorSource(dbz))
#inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("nietzsche", "blabla1", "blabla2", "-", "chapter"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
#docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
d[which(!d$word %in%
c(commonwords$V1[1:200], "-")) , ]
d = d[which(!d$word %in%
c(commonwords$V1[1:200], "-")) , ]
d = d[which(nchar(d$word) > 1),]
res<- wordcloud(words = d$word, freq = d$freq, lang = "english",
max.words = 120, colorPalette = "black")
docs <- Corpus(VectorSource(c(nietzsche, dbz))) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(tolower)  %>%
tm_map(removeWords, c( "-", "chapter",
"xvi", "cleanthes","philo",
"footnote", "things", "prop", commonwords, stopwords("english"))) %>%
tm_map(stripWhitespace)
#tm_map(PlainTextDocument)
tdm <- TermDocumentMatrix(docs) %>%
as.matrix()
colnames(tdm) = c("Zarathustra", "DBZ")
# remove words by rownames of tdm
tdm = tdm[ ! rownames(tdm) %in% c("-", "chapter", "iii", "applause","âve", "ât", "âll", "âm", "âd", "âre", "âs"),]
tdm = tdm[which(nchar(rownames(tdm)) > 1), ]
findFreqTerms(TermDocumentMatrix(docs), lowfreq = 30)
par(mfrow=c(1,1))
#par(mar=c(2,2,2,2))
comparison.cloud(tdm, random.order=FALSE, colors = c("black","darkorange"),
title.size=1.5, max.words=400)
